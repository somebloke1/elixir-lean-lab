# .claude/execute-parallel-evolution

This command executes the EvoBuil parallel evolution workflow, creating three independent git worktrees where separate instances concurrently improve the codebase based on shared insights and goals.

## Usage

```bash
claude < .claude/execute-parallel-evolution
```

## Interactive Process

When you run this command, I will:
1. Verify prerequisites (git worktree, clean working directory)
2. Ask for evolution parameters (duration, focus areas if any)
3. Create three parallel worktree instances with unique UUIDs
4. Provide launch instructions for each instance
5. Set up analysis framework for later comparison

## Input Requirements

Before running this command, ensure:
1. Current branch is clean: `git status`
2. You're on main branch with latest changes: `git checkout main && git pull`
3. You have ~15 minutes for initial setup
4. You understand this will create 3 new directories adjacent to current project

## Process

I'll help you execute parallel evolution by:

### 1. Environment Verification
```bash
# Check git version (needs 2.5+)
git --version

# Verify clean working directory
git status

# Ensure we're on main
git checkout main
git pull origin main
```

### 2. Create Parallel Instances
```bash
# Generate unique identifiers
UUID1=$(uuidgen | cut -c1-8)
UUID2=$(uuidgen | cut -c1-8)
UUID3=$(uuidgen | cut -c1-8)

# Create evolution branches
git branch evobuild-$UUID1
git branch evobuild-$UUID2
git branch evobuild-$UUID3

# Set up worktrees
mkdir -p ../elixir-lean-lab-evolutions
git worktree add ../elixir-lean-lab-evolutions/instance-$UUID1 evobuild-$UUID1
git worktree add ../elixir-lean-lab-evolutions/instance-$UUID2 evobuild-$UUID2
git worktree add ../elixir-lean-lab-evolutions/instance-$UUID3 evobuild-$UUID3
```

### 3. Initialize Each Instance
For each worktree, I'll create:
- Instance identity file with UUID
- Development brief based on recent insights
- Progress tracking template
- Launch script

### 4. Provide Launch Instructions
```bash
# Terminal 1
cd ../elixir-lean-lab-evolutions/instance-$UUID1
claude --working-directory . --instructions "You are evolution instance $UUID1. Review INSTANCE_BRIEF.md and begin improving the codebase autonomously. Commit with [$UUID1] prefix."

# Terminal 2
cd ../elixir-lean-lab-evolutions/instance-$UUID2
claude --working-directory . --instructions "You are evolution instance $UUID2. Review INSTANCE_BRIEF.md and begin improving the codebase autonomously. Commit with [$UUID2] prefix."

# Terminal 3
cd ../elixir-lean-lab-evolutions/instance-$UUID3
claude --working-directory . --instructions "You are evolution instance $UUID3. Review INSTANCE_BRIEF.md and begin improving the codebase autonomously. Commit with [$UUID3] prefix."
```

### 5. Set Up Analysis Framework
Create comparison tools:
- Metrics collection script
- Commit analysis tool
- Merge strategy helper
- Selection criteria checklist

## Instance Brief Template

Each instance receives:
```markdown
# Evolution Instance Brief - $UUID

## Your Identity
You are instance $UUID, one of three parallel instances improving Elixir Lean Lab.

## Context from Recent Reflection
- Alpine builder verified at 77.5MB (target was 20-30MB)
- Other builders implemented but not validated
- BEAM VM has ~58MB irreducible complexity
- "Implementation illusion" - code exists but isn't validated
- Need to optimize for "minimal sufficient" not "minimal possible"

## Your Mission
Autonomously improve the codebase based on these insights:
1. Fix validation gaps in builders
2. Improve architectural abstractions
3. Optimize for real-world functionality
4. Document with evidence

## Constraints
- Respect physics (BEAM's 58MB minimum)
- Validate all claims with evidence
- Commit frequently with [$UUID] prefix
- Work independently - no coordination with other instances

## Success Metrics
- Validated improvements (not just code)
- Real performance gains
- Better architecture
- Clear documentation

Begin by analyzing the codebase and choosing your own priorities.
```

## Analysis Tools

### Metrics Collection Script
```bash
#!/bin/bash
# analyze_evolution.sh
INSTANCE_ID=$1
cd ../elixir-lean-lab-evolutions/instance-$INSTANCE_ID

echo "=== Instance $INSTANCE_ID Analysis ==="
echo "Commits: $(git log --oneline evobuild-$INSTANCE_ID ^main | wc -l)"
echo "Files changed: $(git diff --stat main...evobuild-$INSTANCE_ID | tail -1)"
echo "Tests added: $(git diff main...evobuild-$INSTANCE_ID --name-only | grep test | wc -l)"
echo "Validations: $(git log evobuild-$INSTANCE_ID ^main --grep="validated:" | wc -l)"

# Size improvements
if [ -f "size_report.txt" ]; then
    echo "Size achievements:"
    cat size_report.txt
fi

# Test results
mix test --cover
echo "Test coverage: $(grep "Coverage" cover/modules.html | head -1)"
```

### Comparison Matrix Generator
```bash
#!/bin/bash
# compare_evolutions.sh
echo "| Metric | Instance 1 | Instance 2 | Instance 3 |"
echo "|--------|------------|------------|------------|"
# ... automated metric comparison
```

## Output Format

After execution, you'll have:
1. Three independent evolution branches
2. Three worktree directories with separate development
3. Analysis tools for comparison
4. Clear instructions for selection process

## Examples

### Example: Previous Evolution Result
```
Instance A: Focused on validation framework, added 15 tests
Instance B: Optimized Alpine builder, achieved 72MB (7% reduction)  
Instance C: Refactored all builders to use shared behavior

Selection: Merged Instance C, cherry-picked size optimizations from B
```

## Evaluation Criteria

Successful parallel evolution should produce:
1. Diverse approaches to same problems
2. At least one significant improvement per instance
3. Natural discovery of different issues
4. Clear evidence for all claims
5. Mergeable or cherry-pickable improvements

## Post-Evolution Steps

After evolution period (recommended: 3-7 days):
1. Freeze all development
2. Run analysis scripts
3. Review each instance's approach
4. Select best elements:
   - Full merge of best instance
   - Cherry-pick specific improvements
   - Hybrid combination
5. Document learnings about approach diversity

## Safety Measures

- All work in separate worktrees (main branch safe)
- Each instance isolated from others
- Can abandon any instance without impact
- Full git history preserved for analysis

## Related Resources

- Evolution workflow: @./.claude/EVOBUILD_PARALLEL_WORKFLOW.md
- Project insights: @./docs/PHILOSOPHY.md, @./docs/DEVELOPMENT_PROCESS.md
- Recent reflections: @./docs/NEXT_STEPS.md

Ready to begin parallel evolution? I'll guide you through each step.